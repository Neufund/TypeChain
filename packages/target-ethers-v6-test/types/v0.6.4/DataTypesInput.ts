/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  Interface, FunctionFragment, Result,
} from "ethers";
import type { ContractRunner,TransactionRequest,  } from "ethers/types/providers";
import type { ContractMethod,Â ContractEvent, EventLog  } from "ethers/types/contract";
import type { Listener } from "ethers/src.ts/utils";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StructsLib1 {
  export type InfoStruct = {
    a: PromiseOrValue<BigNumberish>;
    b: PromiseOrValue<BigNumberish>;
  };

  export type InfoStructOutput = [bigint, bigint] & {
    a: bigint;
    b: bigint;
  };
}

export declare namespace StructsLib2 {
  export type InfoStruct = {
    a: PromiseOrValue<string>;
    b: PromiseOrValue<string>;
  };

  export type InfoStructOutput = [string, string] & { a: string; b: string };
}

export declare namespace DataTypesInput {
  export type Struct1Struct = {
    uint256_0: PromiseOrValue<BigNumberish>;
    uint256_1: PromiseOrValue<BigNumberish>;
  };

  export type Struct1StructOutput = [bigint, bigint] & {
    uint256_0: bigint;
    uint256_1: bigint;
  };

  export type Struct2Struct = {
    input1: PromiseOrValue<BigNumberish>;
    input2: DataTypesInput.Struct1Struct;
  };

  export type Struct2StructOutput = [
    bigint,
    DataTypesInput.Struct1StructOutput
  ] & { input1: bigint; input2: DataTypesInput.Struct1StructOutput };

  export type Struct3Struct = { input1: PromiseOrValue<BigNumberish>[] };

  export type Struct3StructOutput = [bigint[]] & { input1: bigint[] };
}

export interface DataTypesInputInterface extends Interface {
  functions: {
    "input_address(address)": FunctionFragment;
    "input_bool(bool)": FunctionFragment;
    "input_bytes(bytes)": FunctionFragment;
    "input_bytes1(bytes1)": FunctionFragment;
    "input_enum(uint8)": FunctionFragment;
    "input_fixedarray_array_fixedarray(uint8[3][][4])": FunctionFragment;
    "input_int256(int256)": FunctionFragment;
    "input_int8(int8)": FunctionFragment;
    "input_multiple_structs_with_same_name((uint160,uint160))": FunctionFragment;
    "input_stat_array(uint8[3])": FunctionFragment;
    "input_string(string)": FunctionFragment;
    "input_struct((uint256,uint256))": FunctionFragment;
    "input_struct2((uint256,(uint256,uint256)))": FunctionFragment;
    "input_struct2_array((uint256,(uint256,uint256))[])": FunctionFragment;
    "input_struct2_tuple(tuple[3])": FunctionFragment;
    "input_struct3_array((uint256[])[])": FunctionFragment;
    "input_struct_array((uint256,uint256)[])": FunctionFragment;
    "input_struct_array_array(tuple[][])": FunctionFragment;
    "input_struct_array_array_array(tuple[][][])": FunctionFragment;
    "input_struct_array_fixedarray(tuple[][2])": FunctionFragment;
    "input_struct_fixedarray_array(tuple[2][])": FunctionFragment;
    "input_struct_fixedarray_array_fixedarray(tuple[2][][3])": FunctionFragment;
    "input_struct_fixedarray_array_fixedarray_array_fixedarray(tuple[2][][3][][4])": FunctionFragment;
    "input_struct_fixedarray_fixedarray(tuple[2][3])": FunctionFragment;
    "input_tuple(uint256,uint256)": FunctionFragment;
    "input_uint256(uint256)": FunctionFragment;
    "input_uint8(uint8)": FunctionFragment;
    "input_uint_array(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "input_address"
      | "input_bool"
      | "input_bytes"
      | "input_bytes1"
      | "input_enum"
      | "input_fixedarray_array_fixedarray"
      | "input_int256"
      | "input_int8"
      | "input_multiple_structs_with_same_name"
      | "input_stat_array"
      | "input_string"
      | "input_struct"
      | "input_struct2"
      | "input_struct2_array"
      | "input_struct2_tuple"
      | "input_struct3_array"
      | "input_struct_array"
      | "input_struct_array_array"
      | "input_struct_array_array_array"
      | "input_struct_array_fixedarray"
      | "input_struct_fixedarray_array"
      | "input_struct_fixedarray_array_fixedarray"
      | "input_struct_fixedarray_array_fixedarray_array_fixedarray"
      | "input_struct_fixedarray_fixedarray"
      | "input_tuple"
      | "input_uint256"
      | "input_uint8"
      | "input_uint_array"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "input_address",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_bool",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_bytes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_bytes1",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_enum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_fixedarray_array_fixedarray",
    values: [
      [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "input_int256",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_int8",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_multiple_structs_with_same_name",
    values: [StructsLib1.InfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "input_stat_array",
    values: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "input_string",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct",
    values: [DataTypesInput.Struct1Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct2",
    values: [DataTypesInput.Struct2Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct2_array",
    values: [DataTypesInput.Struct2Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct2_tuple",
    values: [
      [
        DataTypesInput.Struct2Struct,
        DataTypesInput.Struct2Struct,
        DataTypesInput.Struct2Struct
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct3_array",
    values: [DataTypesInput.Struct3Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_array",
    values: [DataTypesInput.Struct1Struct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_array_array",
    values: [DataTypesInput.Struct1Struct[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_array_array_array",
    values: [DataTypesInput.Struct1Struct[][][]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_array_fixedarray",
    values: [[DataTypesInput.Struct1Struct[], DataTypesInput.Struct1Struct[]]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_fixedarray_array",
    values: [[DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_fixedarray_array_fixedarray",
    values: [
      [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_fixedarray_array_fixedarray_array_fixedarray",
    values: [
      [
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][],
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][],
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][],
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "input_struct_fixedarray_fixedarray",
    values: [
      [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct]
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "input_tuple",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_uint256",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_uint8",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "input_uint_array",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "input_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "input_bool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "input_bytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_bytes1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "input_enum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "input_fixedarray_array_fixedarray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_int256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "input_int8", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "input_multiple_structs_with_same_name",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_stat_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_string",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct2_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct2_tuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct3_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_array_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_array_array_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_array_fixedarray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_fixedarray_array",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_fixedarray_array_fixedarray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_fixedarray_array_fixedarray_array_fixedarray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_struct_fixedarray_fixedarray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_tuple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_uint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_uint8",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "input_uint_array",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DataTypesInput extends BaseContract {
  connect(runner: null | ContractRunner): BaseContract;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DataTypesInputInterface;

  queryFilter<TEventArgs extends Array<any>>(
    event: ContractEvent<TEventArgs>, // TODO add args
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<EventLog>>;

  listeners<TEventArgs extends Array<any>>(
    eventFilter?: ContractEvent<TEventArgs>, // TODO add args
  ): Listener; // TODO add args
  listeners(): Promise<Array<Listener>>;
  removeAllListeners<TEventArgs extends Array<any>>(
    eventFilter: ContractEvent<TEventArgs>, // TODO add args
  ): Promise<this>;
  removeAllListeners(eventName?: string): this;
  off: <TEventArgs extends Array<any>>(event: ContractEvent<TEventArgs>, listener: Listener) => Promise<this>;
  on: <TEventArgs extends Array<any>>(event: ContractEvent<TEventArgs>, listener: Listener) => Promise<this>;
  once: <TEventArgs extends Array<any>>(event: ContractEvent<TEventArgs>, listener: Listener) => Promise<this>;
  removeListener: <TEventArgs extends Array<any>>(event: ContractEvent<TEventArgs>, listener: Listener) => Promise<this>;

  input_address: ContractMethod<[input1: PromiseOrValue<string>], [string]>;

  input_bool(
    input1: PromiseOrValue<boolean>,
    overrides?: TransactionRequest
  ): Promise<boolean>;

  input_bytes(
    input1: PromiseOrValue<BytesLike>,
    overrides?: TransactionRequest
  ): Promise<string>;

  input_bytes1(
    input1: PromiseOrValue<BytesLike>,
    overrides?: TransactionRequest
  ): Promise<string>;

  input_enum(
    input1: PromiseOrValue<BigNumberish>,
    overrides?: TransactionRequest
  ): Promise<number>;

  input_fixedarray_array_fixedarray(
    input1: [
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][]
    ],
    overrides?: TransactionRequest
  ): Promise<
    [
      [number, number, number][],
      [number, number, number][],
      [number, number, number][],
      [number, number, number][]
    ]
  >;

  input_int256(
    input1: PromiseOrValue<BigNumberish>,
    overrides?: TransactionRequest
  ): Promise<bigint>;

  input_int8(
    input1: PromiseOrValue<BigNumberish>,
    overrides?: TransactionRequest
  ): Promise<number>;

  input_multiple_structs_with_same_name(
    info1: StructsLib1.InfoStruct,
    overrides?: TransactionRequest
  ): Promise<StructsLib2.InfoStructOutput>;

  input_stat_array(
    input1: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: TransactionRequest
  ): Promise<[number, number, number]>;

  input_string(
    input1: PromiseOrValue<string>,
    overrides?: TransactionRequest
  ): Promise<string>;

  input_struct(
    input1: DataTypesInput.Struct1Struct,
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct1StructOutput>;

  input_struct2(
    input1: DataTypesInput.Struct2Struct,
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct2StructOutput>;

  input_struct2_array(
    input1: DataTypesInput.Struct2Struct[],
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct2StructOutput[]>;

  input_struct2_tuple(
    input: [
      DataTypesInput.Struct2Struct,
      DataTypesInput.Struct2Struct,
      DataTypesInput.Struct2Struct
    ],
    overrides?: TransactionRequest
  ): Promise<
    [
      DataTypesInput.Struct2StructOutput,
      DataTypesInput.Struct2StructOutput,
      DataTypesInput.Struct2StructOutput
    ]
  >;

  input_struct3_array(
    input1: DataTypesInput.Struct3Struct[],
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct3StructOutput[]>;

  input_struct_array(
    input1: DataTypesInput.Struct1Struct[],
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct1StructOutput[]>;

  input_struct_array_array(
    input1: DataTypesInput.Struct1Struct[][],
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct1StructOutput[][]>;

  input_struct_array_array_array(
    input1: DataTypesInput.Struct1Struct[][][],
    overrides?: TransactionRequest
  ): Promise<DataTypesInput.Struct1StructOutput[][][]>;

  input_struct_array_fixedarray(
    input1: [DataTypesInput.Struct1Struct[], DataTypesInput.Struct1Struct[]],
    overrides?: TransactionRequest
  ): Promise<
    [DataTypesInput.Struct1StructOutput[], DataTypesInput.Struct1StructOutput[]]
  >;

  input_struct_fixedarray_array(
    input1: [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
    overrides?: TransactionRequest
  ): Promise<
    [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput][]
  >;

  input_struct_fixedarray_array_fixedarray(
    input1: [
      [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
      [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
      [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
    ],
    overrides?: TransactionRequest
  ): Promise<
    [
      [
        DataTypesInput.Struct1StructOutput,
        DataTypesInput.Struct1StructOutput
      ][],
      [
        DataTypesInput.Struct1StructOutput,
        DataTypesInput.Struct1StructOutput
      ][],
      [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput][]
    ]
  >;

  input_struct_fixedarray_array_fixedarray_array_fixedarray(
    input1: [
      [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
      ][],
      [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
      ][],
      [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
      ][],
      [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
      ][]
    ],
    overrides?: TransactionRequest
  ): Promise<
    [
      [
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][]
      ][],
      [
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][]
      ][],
      [
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][]
      ][],
      [
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][]
      ][]
    ]
  >;

  input_struct_fixedarray_fixedarray(
    input1: [
      [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct],
      [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct],
      [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct]
    ],
    overrides?: TransactionRequest
  ): Promise<
    [
      [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput],
      [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput],
      [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput]
    ]
  >;

  input_tuple(
    input1: PromiseOrValue<BigNumberish>,
    input2: PromiseOrValue<BigNumberish>,
    overrides?: TransactionRequest
  ): Promise<[bigint, bigint]>;

  input_uint256(
    input1: PromiseOrValue<BigNumberish>,
    overrides?: TransactionRequest
  ): Promise<bigint>;

  input_uint8(
    input1: PromiseOrValue<BigNumberish>,
    overrides?: TransactionRequest
  ): Promise<number>;

  input_uint_array(
    input1: PromiseOrValue<BigNumberish>[],
    overrides?: TransactionRequest
  ): Promise<bigint[]>;

  callStatic: {
    input_address(
      input1: PromiseOrValue<string>,
      overrides?: TransactionRequest
    ): Promise<string>;

    input_bool(
      input1: PromiseOrValue<boolean>,
      overrides?: TransactionRequest
    ): Promise<boolean>;

    input_bytes(
      input1: PromiseOrValue<BytesLike>,
      overrides?: TransactionRequest
    ): Promise<string>;

    input_bytes1(
      input1: PromiseOrValue<BytesLike>,
      overrides?: TransactionRequest
    ): Promise<string>;

    input_enum(
      input1: PromiseOrValue<BigNumberish>,
      overrides?: TransactionRequest
    ): Promise<number>;

    input_fixedarray_array_fixedarray(
      input1: [
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][],
        [
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>,
          PromiseOrValue<BigNumberish>
        ][]
      ],
      overrides?: TransactionRequest
    ): Promise<
      [
        [number, number, number][],
        [number, number, number][],
        [number, number, number][],
        [number, number, number][]
      ]
    >;

    input_int256(
      input1: PromiseOrValue<BigNumberish>,
      overrides?: TransactionRequest
    ): Promise<bigint>;

    input_int8(
      input1: PromiseOrValue<BigNumberish>,
      overrides?: TransactionRequest
    ): Promise<number>;

    input_multiple_structs_with_same_name(
      info1: StructsLib1.InfoStruct,
      overrides?: TransactionRequest
    ): Promise<StructsLib2.InfoStructOutput>;

    input_stat_array(
      input1: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: TransactionRequest
    ): Promise<[number, number, number]>;

    input_string(
      input1: PromiseOrValue<string>,
      overrides?: TransactionRequest
    ): Promise<string>;

    input_struct(
      input1: DataTypesInput.Struct1Struct,
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct1StructOutput>;

    input_struct2(
      input1: DataTypesInput.Struct2Struct,
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct2StructOutput>;

    input_struct2_array(
      input1: DataTypesInput.Struct2Struct[],
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct2StructOutput[]>;

    input_struct2_tuple(
      input: [
        DataTypesInput.Struct2Struct,
        DataTypesInput.Struct2Struct,
        DataTypesInput.Struct2Struct
      ],
      overrides?: TransactionRequest
    ): Promise<
      [
        DataTypesInput.Struct2StructOutput,
        DataTypesInput.Struct2StructOutput,
        DataTypesInput.Struct2StructOutput
      ]
    >;

    input_struct3_array(
      input1: DataTypesInput.Struct3Struct[],
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct3StructOutput[]>;

    input_struct_array(
      input1: DataTypesInput.Struct1Struct[],
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct1StructOutput[]>;

    input_struct_array_array(
      input1: DataTypesInput.Struct1Struct[][],
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct1StructOutput[][]>;

    input_struct_array_array_array(
      input1: DataTypesInput.Struct1Struct[][][],
      overrides?: TransactionRequest
    ): Promise<DataTypesInput.Struct1StructOutput[][][]>;

    input_struct_array_fixedarray(
      input1: [DataTypesInput.Struct1Struct[], DataTypesInput.Struct1Struct[]],
      overrides?: TransactionRequest
    ): Promise<
      [
        DataTypesInput.Struct1StructOutput[],
        DataTypesInput.Struct1StructOutput[]
      ]
    >;

    input_struct_fixedarray_array(
      input1: [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
      overrides?: TransactionRequest
    ): Promise<
      [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput][]
    >;

    input_struct_fixedarray_array_fixedarray(
      input1: [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
      ],
      overrides?: TransactionRequest
    ): Promise<
      [
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ][]
      ]
    >;

    input_struct_fixedarray_array_fixedarray_array_fixedarray(
      input1: [
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][],
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][],
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][],
        [
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][],
          [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct][]
        ][]
      ],
      overrides?: TransactionRequest
    ): Promise<
      [
        [
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][]
        ][],
        [
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][]
        ][],
        [
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][]
        ][],
        [
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][],
          [
            DataTypesInput.Struct1StructOutput,
            DataTypesInput.Struct1StructOutput
          ][]
        ][]
      ]
    >;

    input_struct_fixedarray_fixedarray(
      input1: [
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct],
        [DataTypesInput.Struct1Struct, DataTypesInput.Struct1Struct]
      ],
      overrides?: TransactionRequest
    ): Promise<
      [
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ],
        [
          DataTypesInput.Struct1StructOutput,
          DataTypesInput.Struct1StructOutput
        ],
        [DataTypesInput.Struct1StructOutput, DataTypesInput.Struct1StructOutput]
      ]
    >;

    input_tuple(
      input1: PromiseOrValue<BigNumberish>,
      input2: PromiseOrValue<BigNumberish>,
      overrides?: TransactionRequest
    ): Promise<[bigint, bigint]>;

    input_uint256(
      input1: PromiseOrValue<BigNumberish>,
      overrides?: TransactionRequest
    ): Promise<bigint>;

    input_uint8(
      input1: PromiseOrValue<BigNumberish>,
      overrides?: TransactionRequest
    ): Promise<number>;

    input_uint_array(
      input1: PromiseOrValue<BigNumberish>[],
      overrides?: TransactionRequest
    ): Promise<bigint[]>;
  };

  filters: {};
}
