/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Interface, EventFragment } from "ethers";
import type { ContractRunner } from "ethers/types/providers";

import type { Listener } from "ethers/src.ts/utils";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
} from "../../common";

export interface AInterface extends Interface {
  getEvent(nameOrSignatureOrTopic: "Committed"): EventFragment;
}

export namespace CommittedEvent {
  export interface Object {
    whitelist: string[];
  }
  export type Tuple = [whitelist: string[]];
  export type Event = TypedContractEvent<Tuple, Object>;
  export type Filter = TypedDeferredTopicFilter<Event>;
}

export interface A extends BaseContract {
  connect(runner: null | ContractRunner): BaseContract;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<this>;

  getEvent(
    key: "Committed"
  ): TypedContractEvent<CommittedEvent.Tuple, CommittedEvent.Object>;

  // TODO change this bucket to events once changed in ethers beta exports
  filters: {
    "Committed(address[])": TypedContractEvent<
      CommittedEvent.Tuple,
      CommittedEvent.Object
    >;
    Committed: TypedContractEvent<CommittedEvent.Tuple, CommittedEvent.Object>;
  };
}
