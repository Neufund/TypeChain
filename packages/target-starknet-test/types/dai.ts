/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  AddTransactionResponse,
  Invocation,
  EstimateFeeResponse,
} from "starknet";

interface dai {
  decimals(): Promise<{ res: BigInt }>;
  name(): Promise<{ res: BigInt }>;
  symbol(): Promise<{ res: BigInt }>;
  totalSupply(): Promise<{ res: BigInt }>;
  balanceOf(user: BigInt): Promise<{ res: BigInt }>;
  allowance(owner: BigInt, spender: BigInt): Promise<{ res: BigInt }>;
  wards(user: BigInt): Promise<{ res: BigInt }>;
  mint(account: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
  burn(account: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
  rely(user: BigInt): Promise<AddTransactionResponse>;
  deny(user: BigInt): Promise<AddTransactionResponse>;
  transfer(recipient: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
  transferFrom(
    sender: BigInt,
    recipient: BigInt,
    amount: BigInt
  ): Promise<AddTransactionResponse>;
  approve(spender: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
  increaseAllowance(
    spender: BigInt,
    amount: BigInt
  ): Promise<AddTransactionResponse>;
  decreaseAllowance(
    spender: BigInt,
    amount: BigInt
  ): Promise<AddTransactionResponse>;

  functions: {
    decimals(): Promise<{ res: BigInt }>;
    name(): Promise<{ res: BigInt }>;
    symbol(): Promise<{ res: BigInt }>;
    totalSupply(): Promise<{ res: BigInt }>;
    balanceOf(user: BigInt): Promise<{ res: BigInt }>;
    allowance(owner: BigInt, spender: BigInt): Promise<{ res: BigInt }>;
    wards(user: BigInt): Promise<{ res: BigInt }>;
    mint(account: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
    burn(account: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
    rely(user: BigInt): Promise<AddTransactionResponse>;
    deny(user: BigInt): Promise<AddTransactionResponse>;
    transfer(
      recipient: BigInt,
      amount: BigInt
    ): Promise<AddTransactionResponse>;
    transferFrom(
      sender: BigInt,
      recipient: BigInt,
      amount: BigInt
    ): Promise<AddTransactionResponse>;
    approve(spender: BigInt, amount: BigInt): Promise<AddTransactionResponse>;
    increaseAllowance(
      spender: BigInt,
      amount: BigInt
    ): Promise<AddTransactionResponse>;
    decreaseAllowance(
      spender: BigInt,
      amount: BigInt
    ): Promise<AddTransactionResponse>;
  };

  callStatic: {
    decimals(): Promise<{ res: BigInt }>;
    name(): Promise<{ res: BigInt }>;
    symbol(): Promise<{ res: BigInt }>;
    totalSupply(): Promise<{ res: BigInt }>;
    balanceOf(user: BigInt): Promise<{ res: BigInt }>;
    allowance(owner: BigInt, spender: BigInt): Promise<{ res: BigInt }>;
    wards(user: BigInt): Promise<{ res: BigInt }>;
    mint(account: BigInt, amount: BigInt): Promise<{}>;
    burn(account: BigInt, amount: BigInt): Promise<{}>;
    rely(user: BigInt): Promise<{}>;
    deny(user: BigInt): Promise<{}>;
    transfer(recipient: BigInt, amount: BigInt): Promise<{ res: BigInt }>;
    transferFrom(
      sender: BigInt,
      recipient: BigInt,
      amount: BigInt
    ): Promise<{ res: BigInt }>;
    approve(spender: BigInt, amount: BigInt): Promise<{ res: BigInt }>;
    increaseAllowance(
      spender: BigInt,
      amount: BigInt
    ): Promise<{ res: BigInt }>;
    decreaseAllowance(
      spender: BigInt,
      amount: BigInt
    ): Promise<{ res: BigInt }>;
  };

  populateTransaction: {
    decimals(): Invocation;
    name(): Invocation;
    symbol(): Invocation;
    totalSupply(): Invocation;
    balanceOf(user: BigInt): Invocation;
    allowance(owner: BigInt, spender: BigInt): Invocation;
    wards(user: BigInt): Invocation;
    mint(account: BigInt, amount: BigInt): Invocation;
    burn(account: BigInt, amount: BigInt): Invocation;
    rely(user: BigInt): Invocation;
    deny(user: BigInt): Invocation;
    transfer(recipient: BigInt, amount: BigInt): Invocation;
    transferFrom(sender: BigInt, recipient: BigInt, amount: BigInt): Invocation;
    approve(spender: BigInt, amount: BigInt): Invocation;
    increaseAllowance(spender: BigInt, amount: BigInt): Invocation;
    decreaseAllowance(spender: BigInt, amount: BigInt): Invocation;
  };

  estimateFee: {
    decimals(): Promise<EstimateFeeResponse>;
    name(): Promise<EstimateFeeResponse>;
    symbol(): Promise<EstimateFeeResponse>;
    totalSupply(): Promise<EstimateFeeResponse>;
    balanceOf(user: BigInt): Promise<EstimateFeeResponse>;
    allowance(owner: BigInt, spender: BigInt): Promise<EstimateFeeResponse>;
    wards(user: BigInt): Promise<EstimateFeeResponse>;
    mint(account: BigInt, amount: BigInt): Promise<EstimateFeeResponse>;
    burn(account: BigInt, amount: BigInt): Promise<EstimateFeeResponse>;
    rely(user: BigInt): Promise<EstimateFeeResponse>;
    deny(user: BigInt): Promise<EstimateFeeResponse>;
    transfer(recipient: BigInt, amount: BigInt): Promise<EstimateFeeResponse>;
    transferFrom(
      sender: BigInt,
      recipient: BigInt,
      amount: BigInt
    ): Promise<EstimateFeeResponse>;
    approve(spender: BigInt, amount: BigInt): Promise<EstimateFeeResponse>;
    increaseAllowance(
      spender: BigInt,
      amount: BigInt
    ): Promise<EstimateFeeResponse>;
    decreaseAllowance(
      spender: BigInt,
      amount: BigInt
    ): Promise<EstimateFeeResponse>;
  };
}
