/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export declare namespace KingOfTheHill {
  export type BidStruct =
    | [string, number | string | BN]
    | { bidder: string; value: number | string | BN };

  export type BidStructOutputArray = [string, string];
  export type BidStructOutputStruct = { bidder: string; value: string };
  export type BidStructOutput = BidStructOutputArray & BidStructOutputStruct;
}

export type HighestBidIncreased = ContractEventLog<{
  bid: KingOfTheHill.BidStructOutput;
  0: KingOfTheHill.BidStructOutput;
}>;

export interface KingOfTheHill extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): KingOfTheHill;
  clone(): KingOfTheHill;
  methods: {
    bid(): PayableTransactionObject<void>;

    highestBid(): NonPayableTransactionObject<
      [string, string] & { bidder: string; value: string }
    >;

    withdraw(): NonPayableTransactionObject<void>;
  };
  events: {
    HighestBidIncreased(cb?: Callback<HighestBidIncreased>): EventEmitter;
    HighestBidIncreased(
      options?: EventOptions,
      cb?: Callback<HighestBidIncreased>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "HighestBidIncreased", cb: Callback<HighestBidIncreased>): void;
  once(
    event: "HighestBidIncreased",
    options: EventOptions,
    cb: Callback<HighestBidIncreased>
  ): void;
}
